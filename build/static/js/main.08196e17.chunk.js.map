{"version":3,"sources":["components/Note.js","services/Note.js","App.js","index.js"],"names":["Note","props","label","note","important","className","content","onClick","toggleImportance","baseURL","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","returnedNote","catch","error","console","log","setTimeout","n","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"qMAaeA,EAXF,SAACC,GACV,IAAMC,EAAQD,EAAME,KAAKC,UACrB,qBAAuB,iBAC3B,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAME,KAAKG,QACZ,wBAAQC,QAASN,EAAMO,iBAAvB,SAA0CN,Q,gBCPhDO,EAAU,kCAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAahC,EAVA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQhC,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SC2EzCK,G,MAAe,SAAClB,GAClB,OAAIA,EAAMmB,QAIN,qBAAKf,UAAU,QAAf,SACKJ,EAAMmB,UAJJ,OASAC,EAhGH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACNC,EADM,KACCC,EADD,OAEkBF,mBAAS,IAF3B,mBAENG,EAFM,KAEGC,EAFH,OAGkBJ,oBAAS,GAH3B,mBAGNK,EAHM,KAGGC,EAHH,OAI2BN,mBAAS,2BAJpC,mBAINO,EAJM,KAIQC,EAJR,KAMdC,qBAAU,WACNC,IAEKpB,MAAK,SAACqB,GAAD,OAAkBT,EAASS,QACtC,IAEH,IAsCMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAChC,GAAD,OAA6B,IAAnBA,EAAKC,aAElC,OACA,gCACI,uCACA,cAAC,EAAD,CACIgB,QAASS,IAEb,8BACI,yBAAQtB,QAAS,kBAAMqB,GAAYD,IAAnC,kBACWA,EAAU,YAAc,WAGvC,6BACKO,EAAYE,KAAI,SAAAjC,GAAI,OACjB,cAAC,EAAD,CAEIA,KAAMA,EACNK,iBAAkB,kBArCT,SAACS,GACtB,IAAMd,EAAOoB,EAAMc,MAAK,SAAClC,GAAD,OAAUA,EAAKc,KAAOA,KACxCqB,EAAW,2BAAQnC,GAAR,IAAcC,WAAYD,EAAKC,YAEhD4B,EACYf,EAAIqB,GACX1B,MAAK,SAAC2B,GAAD,OAAkBf,EAASD,EAAMa,KAAI,SAACjC,GAAD,OAAUA,EAAKc,KAAOA,EAAKsB,EAAepC,SACpFqC,OAAO,SAAAC,GACJC,QAAQC,IAAIpB,GACZO,EAAgB,QAAD,OAAS3B,EAAKG,QAAd,yCACfsC,YAAW,WACPd,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAU,GAAC,OAAIA,EAAE5B,KAAOA,SAwBRT,CAAiBL,EAAKc,MAFzCd,EAAKc,SAMtB,uBAAM6B,SA9DM,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf3C,QAASmB,EACTyB,MAAM,IAAIC,MAAOC,cACjBhD,UAAWiD,KAAKC,SAAW,GAC3BrC,GAAIM,EAAMgC,OAAS,GAGvBvB,EACYiB,GACPrC,MAAK,SAAA2B,GACFf,EAAS,GAAD,mBAAKD,GAAL,CAAYgB,KACpBb,EAAW,QAiDnB,UACQ,uBACI8B,MAAO/B,EACPgC,SAhDS,SAACV,GACtBrB,EAAWqB,EAAMW,OAAOF,UAiDhB,wBAAQG,KAAK,SAAb,yBCjFhBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.08196e17.chunk.js","sourcesContent":["import react from 'react';\n\nconst Note = (props) => {\n    const label = props.note.important ? \n        'make not important' : 'make important';\n    return (\n        <li className=\"note\">\n            {props.note.content}\n            <button onClick={props.toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note;","import axios from 'axios';\nconst baseURL = 'http://localhost:3001/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseURL);\n    return request.then((response) => response.data);\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseURL, newObject);\n    return request.then((response) => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseURL}/${id}`, newObject);\n    return request.then((response) => response.data);\n}\n\nexport default { getAll, create, update };","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/Note';\nimport './index.css';\n\nconst App = () => {\n    const [ notes, setNotes ] = useState([]);\n    const [ newNote, setNewNote ] = useState('');\n    const [ showAll, setShowAll ] = useState(true);\n    const [ errorMessage, setErrorMessage] = useState(\"some error has occurred\");\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then((initialNotes) => setNotes(initialNotes));\n    }, []);\n\n    const addNote = (event) => {\n        event.preventDefault();\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1\n        };\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes([...notes, returnedNote]);\n                setNewNote('');\n            });\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value);\n    }\n\n    const toggleImportance = (id) => {\n        const note = notes.find((note) => note.id === id);\n        const changedNote = { ...note, important: !note.important };\n\n        noteService\n            .update(id, changedNote)\n            .then((returnedNote) => setNotes(notes.map((note) => note.id === id ? returnedNote : note)))\n            .catch( error => {\n                console.log(notes);\n                setErrorMessage(`Note ${note.content} was already removed from the server`);\n                setTimeout(() => {\n                    setErrorMessage(null);\n                }, 5000);\n                setNotes(notes.filter(n => n.id !== id));\n            });\n    }\n\n    const notesToShow = showAll \n        ? notes \n        : notes.filter((note) => note.important === true);\n\n    return (\n    <div>\n        <h1>Notes</h1>\n        <Notification \n            message={errorMessage}\n        />\n        <div>\n            <button onClick={() => setShowAll(!showAll)}>\n                show { showAll ? 'important' : 'all'}\n            </button>\n        </div>\n        <ul>\n            {notesToShow.map(note => \n                <Note \n                    key={note.id} \n                    note={note} \n                    toggleImportance={() => toggleImportance(note.id)}\n                />\n            )}\n        </ul>\n        <form onSubmit={addNote}>\n                <input \n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n        </form>\n    </div>\n  );\n}\n\nconst Notification = (props) => {\n    if(!props.message) \n        return null;\n    \n    return (\n        <div className=\"error\">\n            {props.message}\n        </div>\n    )\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}